---
title: "_create_big_figure"
---

```{r}
#| message: false

library(tidyverse)
library(patchwork)
library(ggbeeswarm)
```

```{r}
#| echo: false

source("./R/functions.R")
info_df <- get_info_df()
valence_df <- get_valence_df()
holistic_df <- get_holistic_df()
```

```{r}
holistic_dfw <-  
  holistic_df |> 
  select(-Scale) |> 
  tidyr::pivot_wider(
    names_from = Item,
    values_from = Rating
  ) |> 
  mutate(
    "Positive Affect" = rowMeans(
      across(c(Alert, Determined, Enthusiastic, Excited, Inspired)), 
      na.rm = TRUE
    ),
    "Negative Affect" = rowMeans(
      across(c(Afraid, Distressed, Nervous, Scared, Upset)), 
      na.rm = TRUE
    )
  ) |> 
  group_by(Abbrev) |> 
  mutate(
    mPA = median(`Positive Affect`),
    mNA = median(`Negative Affect`)
  ) |> 
  ungroup()

pa <- holistic_dfw |> 
  ggplot(
    aes(
      x = `Positive Affect`, 
      y = fct_reorder(
        Abbrev, 
        .x = `Positive Affect`, 
        .fun = mean
      ), 
      fill = mPA
    )
  ) +
  geom_boxplot(linewidth = 1/3, outlier.alpha = 1/3, outlier.size = 1) +
  stat_summary(geom = "point", shape = 23, fun = mean, fill = "white", size = 1) +
  scale_fill_gradient(limits = c(0, 4), low = "white", high = "#e6550d") +
  labs(y = NULL) +
  theme_bw(base_size = 8) +
  theme(
    panel.grid.major.y = element_blank(),
    legend.position = "none",
    plot.margin = margin(0, 0, 0, 0, unit = "pt")
  )

na <- holistic_dfw |> 
  ggplot(
    aes(
      x = `Negative Affect`, 
      y = fct_reorder(
        Abbrev, 
        .x = `Negative Affect`, 
        .fun = mean
      ), 
      fill = mNA
    )
  ) +
  geom_boxplot(linewidth = 1/3, outlier.alpha = 1/3, outlier.size = 1) +
  stat_summary(geom = "point", shape = 23, fun = mean, fill = "white", size = 1) +
  scale_fill_gradient(limits = c(0, 4), low = "white", high = "#3182bd") +
  labs(y = NULL) +
  theme_bw(base_size = 8) +
  theme(
    panel.grid.major.y = element_blank(),
    legend.position = "none",
    plot.margin = margin(0, 4, 0, 0, unit = "pt")
  )
```

```{r}
(na | pa) + plot_annotation(theme = theme(plot.margin = margin(0,1,0,0, unit = "pt")))
ggsave("spanas.pdf", width = 7.16, height = 4.00, units = "in")
```

```{r}
ggplot(valence_df, aes(x = Rating, fill = stat(x))) + 
  geom_histogram(
    breaks = c(-4.0, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.0), 
    color = "black",
    linewidth = 1/3
  ) +
  labs(
    x = "Valence Rating",
    y = "Count of Bins"
  ) +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_continuous(breaks = c(-4, -2, 0, 2, 4)) +
  scale_fill_gradient2(low = "#3182bd", mid = "white", high = "#e6550d") +
  coord_cartesian(ylim = c(0, 95000)) +
  theme_bw(base_size = 8) +
  theme(
    legend.position = "none",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    plot.margin = margin(4,0,0,0)
  )
ggsave("vhist.pdf", width = 3.5, height = 1.75, units = "in")
```

```{r}
create_valence_plot <- function(valence_df) {
  require("Hmisc")
  valence_df |> 
    ggplot2::ggplot(
      ggplot2::aes(x = Timepoint, y = Rating)
    ) +
    ggplot2::stat_summary(
      geom = "ribbon",
      fun.data = ggplot2::median_hilow,
      fun.args = list(conf.int = .9),
      fill = "#440154"
    ) +
    ggplot2::stat_summary(
      geom = "ribbon",
      fun.data = ggplot2::median_hilow,
      fun.args = list(conf.int = .7),
      fill = "#21908c"
    ) +
    ggplot2::stat_summary(
      geom = "ribbon",
      fun.data = ggplot2::median_hilow,
      fun.args = list(conf.int = .5),
      fill = "#fde725"
    ) +
    ggplot2::geom_hline(
      yintercept = 0, 
      color = "grey", 
      linewidth = 1/2
    ) +
    ggplot2::stat_summary(
      geom = "line", 
      fun = mean, 
      na.rm = TRUE, 
      linewidth = 1/2
    ) +
    ggplot2::scale_x_continuous(
      breaks = seq(0, 10*2*30, 30), 
      expand = c(0, 0),
      labels = s_to_ts
    ) +
    ggplot2::scale_y_continuous(
      expand = c(0, 0)
    ) +
    ggplot2::coord_cartesian(
      ylim = c(-4, 4)
    ) +
    ggplot2::labs(
      y = "Valence Rating", 
      x = "Timestamp within Clip"
    )
}
```


```{r}
p1 <- create_valence_plot(get_valence_df("AkeelahBee")) +
  labs(x = NULL, title = "Akeelah and the Bee") +
  theme_bw(base_size = 8) +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )
p1
```

```{r}
p2 <- create_valence_plot(get_valence_df("Fences")) +
  labs(x = NULL, y = NULL, title = "Fences") +
  theme_bw(base_size = 8) +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )
p2
```

```{r}
p3 <- create_valence_plot(get_valence_df("GreenMile")) +
  labs(title = "The Green Mile") +
  theme_bw(base_size = 8) +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )
p3
```

```{r}
p4 <- create_valence_plot(get_valence_df("LadyBird")) +
  labs(y = NULL, title = "Lady Bird") +
  theme_bw(base_size = 8) +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )
p4
```

```{r}
(p1 + p2 + p3 + p4) + plot_annotation(theme = theme(plot.margin = margin(0,0,0,0)))
ggsave("vts.pdf", width = 7.16, height = 4.50, units = "in")
```

